// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// models: user, client, service, job, payment

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  client    Client[]
  Job       Job[]
  Service   Service[]
  Note      Note[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  Job       Job[]
}

model Service {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Job       Job[]
  isActive  Boolean  @default(true)
}

model Job {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  client    Client?  @relation(fields: [clientId], references: [id])
  clientId  Int?
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isPending Boolean  @default(true)
  Payment   Payment?
  Note      Note[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Float
  isPaid    Boolean  @default(false)
  method    String   @default("cash")
}

model Note {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
